{"version":3,"sources":["components/layouts/Navbar.js","components/client/HeaderClient.js","components/layouts/Spinner.js","components/client/Clients.js","components/client/AddClient.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Link","to","type","data-toggle","data-target","id","Component","HeaderClient","state","target","parseFloat","localStorage","getItem","editedTarget","showTargetForm","renderMonth","Date","getMonth","toUpperCase","renderYear","getFullYear","formatNumber","num","toFixed","replace","renderTotalSale","total","percent","_this","Math","floor","onChange","e","setState","value","targetSubmit","_this$state","preventDefault","setItem","renderTargetForm","_this$state2","onSubmit","name","placeholder","_this2","this","_this$state3","props","href","onClick","Spinner","style","width","height","role","Clients","renderClients","clients","map","client","key","company","customerProduct","tier","saleAmount","concat","sumTotalSale","reduce","acc","Fragment","client_HeaderClient","layouts_Spinner","compose","firestoreConnect","collection","orderBy","connect","firestore","ordered","AddClient","customerName","email","phone","Object","defineProperty","OnSubmitAdd","_this$props","history","newClient","objectSpread","add","then","push","htmlFor","required","maxLength","autoComplete","App","BrowserRouter","layouts_Navbar","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestoreReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c24fb4d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-5\">\r\n        <div className=\"container py-2\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            <span className=\"text-info\">\r\n              <i className=\"fas fa-users mr-1\" />\r\n            </span>\r\n            {'  '}\r\n            Client Manager\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbar\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbar\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  <i className=\"fas fa-home\" /> Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/clients/add\" className=\"nav-link\">\r\n                  <i className=\"fas fa-plus\" /> Add Client\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  <i className=\"fas fa-question\" /> About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item mr-3\">\r\n                <Link to=\"/\" className=\"btn btn-danger\">\r\n                  GG\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  Logout\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass HeaderClient extends Component {\r\n  // initial state\r\n  // target is from the localstorage or 1,000,000\r\n  state = {\r\n    target: parseFloat(localStorage.getItem('target')) || 1000000,\r\n    editedTarget: 0,\r\n    showTargetForm: false\r\n  };\r\n\r\n  // render real time Month\r\n  renderMonth = () => {\r\n    const month = new Date().getMonth();\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'Octobe',\r\n      'November',\r\n      'December'\r\n    ];\r\n    return months[month].toUpperCase();\r\n  };\r\n\r\n  // render real time year\r\n  renderYear = () => {\r\n    return new Date().getFullYear();\r\n  };\r\n\r\n  // format number to look like currency\r\n  formatNumber = num => {\r\n    return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  };\r\n\r\n  // render Percentage of Total Sale Amount\r\n  renderTotalSale = total => {\r\n    const percent = (total / this.state.target) * 100;\r\n    // percentages is over than 50% render green text ;else red text\r\n    if (percent > 50) {\r\n      return (\r\n        <div className=\"percent percent-green\">{Math.floor(percent)}%</div>\r\n      );\r\n    } else {\r\n      return <div className=\"percent percent-red\">{Math.floor(percent)}%</div>;\r\n    }\r\n  };\r\n\r\n  // control form\r\n  onChange = e => {\r\n    this.setState({ editedTarget: e.target.value });\r\n  };\r\n\r\n  // Set new target\r\n  targetSubmit = e => {\r\n    const { showTargetForm, editedTarget } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    // set new target and close the form\r\n    this.setState({\r\n      target: parseFloat(editedTarget),\r\n      showTargetForm: !showTargetForm\r\n    });\r\n\r\n    // save new target into localstorage\r\n    localStorage.setItem('target', editedTarget);\r\n  };\r\n\r\n  // show form edit target\r\n  renderTargetForm = () => {\r\n    const { editedTarget, showTargetForm } = this.state;\r\n\r\n    // Init targetForm\r\n    let targetForm = '';\r\n    // If balance form should display\r\n    if (showTargetForm) {\r\n      targetForm = (\r\n        <form onSubmit={this.targetSubmit}>\r\n          <div className=\"input-group container\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              name=\"target\"\r\n              placeholder=\"Set Target\"\r\n              value={editedTarget}\r\n              onChange={this.onChange}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <input type=\"submit\" value=\"OK\" className=\"btn btn-info\" />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      );\r\n    } else {\r\n      targetForm = null;\r\n    }\r\n\r\n    return targetForm;\r\n  };\r\n\r\n  render() {\r\n    const { target, showTargetForm } = this.state;\r\n    const { total } = this.props;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row mb-5\">\r\n          <div className=\"col-md-7 text-center\">\r\n            <div className=\"card bg-dark card-height mb-resp-card d-flex justify-content-center\">\r\n              <div className=\"text-white text-target-label\">\r\n                TARGET{' '}\r\n                <span className=\"d-none d-md-inline\">\r\n                  IN {this.renderMonth()} {this.renderYear()}\r\n                </span>{' '}\r\n                <small>\r\n                  <a\r\n                    href=\"#!\"\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        showTargetForm: !showTargetForm\r\n                      })\r\n                    }\r\n                  >\r\n                    <i className=\"fas fa-pencil-alt text-warning\" />\r\n                  </a>\r\n                </small>\r\n              </div>\r\n              {this.renderTargetForm()}\r\n              <div className=\"text-target\">{this.formatNumber(target)} THB</div>\r\n              <div className=\"text-white text-target-label\">\r\n                TOTAL <span className=\"d-none d-md-inline\">SALE AMOUNT</span>\r\n              </div>\r\n              <div className=\"text-sale-amount\">\r\n                {this.formatNumber(total)} THB\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-5 text-center\">\r\n            <div className=\"card bg-dark card-height d-flex justify-content-center\">\r\n              <div className=\"text-target-label text-white\">SALE PROGRESS</div>\r\n              {this.renderTotalSale(total)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeaderClient;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div\r\n      className=\"spinner-border text-primary d-block mx-auto\"\r\n      style={{ width: '5rem', height: '5rem' }}\r\n      role=\"status\"\r\n    >\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\n\r\nimport HeaderClient from './HeaderClient';\r\nimport Spinner from '../layouts/Spinner';\r\n\r\nclass Clients extends Component {\r\n  // format number to look like currency\r\n  formatNumber = num => {\r\n    return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  };\r\n\r\n  // render table child with data from props ( firestore )\r\n  renderClients = () => {\r\n    const { clients } = this.props;\r\n    // render each row of table with current item\r\n    return clients.map(client => (\r\n      <tr key={client.id}>\r\n        <td>{client.company}</td>\r\n        <td>{client.customerProduct}</td>\r\n        <td>{client.tier}</td>\r\n        <td>{this.formatNumber(client.saleAmount)}</td>\r\n        <td>\r\n          <Link to={`/client/${client.id}`} className=\"btn btn-secondary\">\r\n            <i className=\"fas fa-angle-double-right\" /> Details\r\n          </Link>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  };\r\n\r\n  // sum total saleAmount\r\n  sumTotalSale = () => {\r\n    const { clients } = this.props;\r\n    // iterate over the clients[array] to sum total of sale amount\r\n    const total = clients.reduce((acc, client) => {\r\n      return acc + client.saleAmount;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  render() {\r\n    // If still loading data from firestore render Loading spinner instread\r\n    if (this.props.clients) {\r\n      return (\r\n        <>\r\n          <HeaderClient total={this.sumTotalSale()} />\r\n          <div className=\"container mb-5\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n                    <h4>Client List</h4>\r\n                    <Link to=\"/clients/add\" className=\"btn btn-info\">\r\n                      <i className=\"fas fa-plus\" /> Add Client\r\n                    </Link>\r\n                  </div>\r\n                  <table className=\"table table-responsive w-100 d-md-table table-striped\">\r\n                    <thead className=\"thead-dark\">\r\n                      <tr>\r\n                        <th>Company</th>\r\n                        <th>Product</th>\r\n                        <th>Tier</th>\r\n                        <th>Sale Amount (THB)</th>\r\n                        <th />\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>{this.renderClients()}</tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return <Spinner />;\r\n    }\r\n  }\r\n}\r\n\r\n// pull [array] clients from reduxStore to props\r\nconst mapStateToProps = state => {\r\n  return {\r\n    clients: state.firestore.ordered.clients\r\n  };\r\n};\r\n\r\n// put the data in collection'clients' in firestore into reduxstore(firestore) and attach to this component ordered by most sale amount at the top\r\nexport default compose(\r\n  firestoreConnect([\r\n    { collection: 'clients', orderBy: ['saleAmount', 'desc'] }\r\n  ]),\r\n  connect(mapStateToProps)\r\n)(Clients);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\n\r\nclass AddClient extends Component {\r\n  state = {\r\n    company: '',\r\n    customerName: '',\r\n    customerProduct: '',\r\n    email: '',\r\n    phone: '',\r\n    tier: '',\r\n    saleAmount: 0\r\n  };\r\n\r\n  // Control input sync with state\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  // Add new client to firestore\r\n  OnSubmitAdd = e => {\r\n    e.preventDefault();\r\n\r\n    const { history, firestore } = this.props;\r\n\r\n    // set new client from the form\r\n    const newClient = { ...this.state };\r\n\r\n    // Turn string to number\r\n    newClient.saleAmount = parseFloat(newClient.saleAmount);\r\n\r\n    // Add to firestore\r\n    firestore\r\n      // Add newClient obj to cellection 'clients\r\n      .add({ collection: 'clients' }, newClient)\r\n      // If add successfully redirect to main page\r\n      .then(() => history.push('/'));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9 mx-auto\">\r\n          <div className=\"card bg-dark mb-5 text-white\">\r\n            <div className=\"card-header\">\r\n              <h3>Add Client</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <form onSubmit={this.OnSubmitAdd}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"company\">Company</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"company\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        maxLength=\"10\"\r\n                        value={this.state.company}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Customer Company...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"customerName\">Customer's Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"customerName\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        maxLength=\"8\"\r\n                        value={this.state.customerName}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Name of contact person...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"company\">Customer's Product</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"customerProduct\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        maxLength=\"30\"\r\n                        value={this.state.customerProduct}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Product...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        value={this.state.email}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Customer Email...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"phone\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        maxLength=\"12\"\r\n                        value={this.state.phone}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Phone Number...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"tier\">Tier</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"tier\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        maxLength=\"1\"\r\n                        value={this.state.tier}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Tier (A/B/C/D) \"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"container\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"saleAmount\">Sale Amount</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"saleAmount\"\r\n                        className=\"form-control\"\r\n                        required\r\n                        value={this.state.saleAmount}\r\n                        onChange={this.onChange}\r\n                        placeholder=\"Sale Amount...\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <input type=\"submit\" className=\"btn btn-info btn-block\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  firestoreConnect(),\r\n  connect(null)\r\n)(AddClient);\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/layouts/Navbar';\nimport Clients from './components/client/Clients';\nimport AddClient from './components/client/AddClient';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"main-body\">\n          <Navbar />\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/\" exact component={Clients} />\n              <Route path=\"/clients/add\" exact component={AddClient} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, compose } from 'redux';\r\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase';\r\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Initialize Firebase\r\nconst config = {\r\n  apiKey: 'AIzaSyBf9fDKbxiSkRvSxOdybFMZEGOEMNNFFdI',\r\n  authDomain: 'clientmanager-80f3c.firebaseapp.com',\r\n  databaseURL: 'https://clientmanager-80f3c.firebaseio.com',\r\n  projectId: 'clientmanager-80f3c',\r\n  storageBucket: 'clientmanager-80f3c.appspot.com',\r\n  messagingSenderId: '145821546683'\r\n};\r\n\r\n// react-redux-firebase config\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  useFirestoreForProfile: true\r\n};\r\n\r\n// Init firebase instance\r\nfirebase.initializeApp(config);\r\n// Init firestore\r\nconst firestore = firebase.firestore();\r\n\r\n// Add reactReduxFirebase enhancer when making store creator\r\nconst createStoreWithFirebase = compose(\r\n  reactReduxFirebase(firebase, rrfConfig), // firebase instance as first argument\r\n  reduxFirestore(firebase)\r\n)(createStore);\r\n\r\n// set rootReducer to connect with firebaseReducer, firestoreReducer\r\nconst rootReducer = combineReducers({\r\n  firebase: firebaseReducer,\r\n  firestore: firestoreReducer\r\n});\r\n\r\n// Initial state\r\nconst initialState = {};\r\n\r\n// Create Store\r\nconst store = createStoreWithFirebase(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    reactReduxFirebase(firebase),\r\n    (window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION__()) ||\r\n      compose()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}