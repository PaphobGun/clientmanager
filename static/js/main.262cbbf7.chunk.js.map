{"version":3,"sources":["components/layouts/Navbar.js","components/client/HeaderClient.js","components/layouts/Spinner.js","components/client/Clients.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Link","to","type","data-toggle","data-target","id","Component","HeaderClient","state","target","renderMonth","Date","getMonth","toUpperCase","renderYear","getFullYear","formatNumber","num","toFixed","replace","renderTotalSale","total","percent","_this","Math","floor","this","props","Spinner","style","width","height","role","Clients","renderClients","clients","map","client","key","company","customerProduct","saleAmount","concat","sumTotalSale","reduce","acc","Fragment","client_HeaderClient","layouts_Spinner","compose","firestoreConnect","collection","connect","firestore","ordered","App","BrowserRouter","layouts_Navbar","Switch","Route","path","component","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestoreReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.262cbbf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-5\">\r\n        <div className=\"container py-2\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            <span className=\"text-info\">\r\n              <i className=\"fas fa-users mr-1\" />\r\n            </span>\r\n            {'  '}\r\n            Client Manager\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbar\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbar\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {' '}\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item mr-3\">\r\n                <Link to=\"/\" className=\"btn btn-danger\">\r\n                  GG\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {' '}\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  Logout\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass HeaderClient extends Component {\r\n  state = {\r\n    target: 3000000\r\n  };\r\n\r\n  // render real time Month\r\n  renderMonth = () => {\r\n    const month = new Date().getMonth();\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'Octobe',\r\n      'November',\r\n      'December'\r\n    ];\r\n    return months[month].toUpperCase();\r\n  };\r\n\r\n  // render real time year\r\n  renderYear = () => {\r\n    return new Date().getFullYear();\r\n  };\r\n\r\n  // format number to look like currency\r\n  formatNumber = num => {\r\n    return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  };\r\n\r\n  // render Percentage of Total Sale Amount\r\n  renderTotalSale = total => {\r\n    const percent = (total / this.state.target) * 100;\r\n    // percentages is over than 50% render green text ;else red text\r\n    if (percent > 50) {\r\n      return (\r\n        <div className=\"percent percent-green\">{Math.floor(percent)}%</div>\r\n      );\r\n    } else {\r\n      return <div className=\"percent percent-red\">{percent}</div>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row mb-5\">\r\n          <div className=\"col-md-7 text-center\">\r\n            <div className=\"card bg-dark card-height mb-resp-card d-flex justify-content-center\">\r\n              <div className=\"text-white text-target-label\">\r\n                TARGET{' '}\r\n                <span className=\"d-none d-md-inline\">\r\n                  IN {this.renderMonth()} {this.renderYear()}\r\n                </span>\r\n              </div>\r\n              <div className=\"text-target\">\r\n                {this.formatNumber(this.state.target)} THB\r\n              </div>\r\n              <div className=\"text-white text-target-label\">\r\n                TOTAL <span className=\"d-none d-md-inline\">SALE AMOUNT</span>\r\n              </div>\r\n              <div className=\"text-sale-amount\">\r\n                {this.formatNumber(this.props.total)} THB\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-5 text-center\">\r\n            <div className=\"card bg-dark card-height d-flex justify-content-center\">\r\n              <div className=\"display-4 text-white\">SALE PROGRESS</div>\r\n              {this.renderTotalSale(this.props.total)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeaderClient;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div\r\n      className=\"spinner-border text-primary d-block mx-auto\"\r\n      style={{ width: '5rem', height: '5rem' }}\r\n      role=\"status\"\r\n    >\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\n\r\nimport HeaderClient from './HeaderClient';\r\nimport Spinner from '../layouts/Spinner';\r\n\r\nclass Clients extends Component {\r\n  // format number to look like currency\r\n  formatNumber = num => {\r\n    return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  };\r\n\r\n  // render table child with data from props ( firestore )\r\n  renderClients = () => {\r\n    const { clients } = this.props;\r\n    // render each row of table with current item\r\n    return clients.map(client => (\r\n      <tr key={client.id}>\r\n        <td>{client.company}</td>\r\n        <td>{client.customerProduct}</td>\r\n        <td>{this.formatNumber(client.saleAmount)}</td>\r\n        <td>\r\n          <Link to={`/client/${client.id}`} className=\"btn btn-secondary\">\r\n            <i className=\"fas fa-angle-double-right\" /> Details\r\n          </Link>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  };\r\n\r\n  // sum total saleAmount\r\n  sumTotalSale = () => {\r\n    const { clients } = this.props;\r\n    // iterate over the clients[array] to sum total of sale amount\r\n    const total = clients.reduce((acc, client) => {\r\n      return acc + client.saleAmount;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  render() {\r\n    // If still loading data from firestore render Loading spinner instread\r\n    if (this.props.clients) {\r\n      return (\r\n        <>\r\n          <HeaderClient total={this.sumTotalSale()} />\r\n          <div className=\"container mb-5\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header\">\r\n                    <h4>Client List</h4>\r\n                  </div>\r\n                  <table className=\"table table-responsive w-100 d-md-table table-striped\">\r\n                    <thead className=\"thead-dark\">\r\n                      <tr>\r\n                        <th>Company</th>\r\n                        <th>Product</th>\r\n                        <th>Sale Amount (THB)</th>\r\n                        <th />\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>{this.renderClients()}</tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return <Spinner />;\r\n    }\r\n  }\r\n}\r\n\r\n// pull [array] clients from reduxStore to props\r\nconst mapStateToProps = state => {\r\n  return {\r\n    clients: state.firestore.ordered.clients\r\n  };\r\n};\r\n\r\n// put the data in collection'clients' in firestore into reduxstore(firestore) and attach to this component\r\nexport default compose(\r\n  firestoreConnect([{ collection: 'clients' }]),\r\n  connect(mapStateToProps)\r\n)(Clients);\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/layouts/Navbar';\nimport Clients from './components/client/Clients';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"main-body\">\n          <Navbar />\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/\" component={Clients} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, compose } from 'redux';\r\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase';\r\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Initialize Firebase\r\nconst config = {\r\n  apiKey: 'AIzaSyBf9fDKbxiSkRvSxOdybFMZEGOEMNNFFdI',\r\n  authDomain: 'clientmanager-80f3c.firebaseapp.com',\r\n  databaseURL: 'https://clientmanager-80f3c.firebaseio.com',\r\n  projectId: 'clientmanager-80f3c',\r\n  storageBucket: 'clientmanager-80f3c.appspot.com',\r\n  messagingSenderId: '145821546683'\r\n};\r\n\r\n// react-redux-firebase config\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  useFirestoreForProfile: true\r\n};\r\n\r\n// Init firebase instance\r\nfirebase.initializeApp(config);\r\n// Init firestore\r\nconst firestore = firebase.firestore();\r\n\r\n// Add reactReduxFirebase enhancer when making store creator\r\nconst createStoreWithFirebase = compose(\r\n  reactReduxFirebase(firebase, rrfConfig), // firebase instance as first argument\r\n  reduxFirestore(firebase)\r\n)(createStore);\r\n\r\n// set rootReducer to connect with firebaseReducer, firestoreReducer\r\nconst rootReducer = combineReducers({\r\n  firebase: firebaseReducer,\r\n  firestore: firestoreReducer\r\n});\r\n\r\n// Initial state\r\nconst initialState = {};\r\n\r\n// Create Store\r\nconst store = createStoreWithFirebase(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    reactReduxFirebase(firebase),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}